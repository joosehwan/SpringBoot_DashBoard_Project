name: CI/CD - Docker Build & Deploy to EC2

# master 브랜치에 push 될 때마다 자동으로 실행됨
on:
  push:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. GitHub 저장소에서 소스코드 체크아웃
    - name: Checkout source code
      uses: actions/checkout@v3

    # 2. Java 17 환경 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. gradlew 실행 권한 부여
    - name: Grant execute permission to Gradle wrapper
      run: chmod +x ./gradlew

    # 4. Gradle로 Spring Boot 프로젝트 빌드 (테스트 생략)
    - name: Build Spring Boot App (skip tests)
      run: ./gradlew build -x test

    # 5. Docker Hub 로그인 (Secrets 사용)
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # 6. Docker 이미지 빌드 (태그: username/my-spring-app:latest)
    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest .

    # 7. Docker Hub로 이미지 푸시
    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest

    # 8. EC2 접속을 위한 SSH 키 설정
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # 9. EC2 호스트 등록 (신뢰된 서버로 추가)
    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || true

    # 10. EC2에 SSH로 접속 → 최신 Docker 이미지 pull & 실행
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest
          docker stop spring-app || true
          docker rm spring-app || true
          docker run --name spring-app --restart=always -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest
        EOF
